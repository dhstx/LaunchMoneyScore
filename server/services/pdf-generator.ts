import PDFDocument from 'pdfkit';
import { ScoringResult } from '../scoring-spec';
import { storagePut } from '../storage';

export interface PDFGenerationResult {
  pdfUrl: string;
  pdfKey: string;
}

/**
 * Generate a PDF report from audit results
 */
export async function generatePDFReport(
  url: string,
  result: ScoringResult
): Promise<PDFGenerationResult> {
  return new Promise(async (resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50, size: 'LETTER' });
      const chunks: Buffer[] = [];

      doc.on('data', (chunk) => chunks.push(chunk));
      doc.on('end', async () => {
        const pdfBuffer = Buffer.concat(chunks);
        
        // Upload to S3
        const timestamp = Date.now();
        const key = `reports/${timestamp}-lms-report.pdf`;
        const { url: pdfUrl } = await storagePut(key, pdfBuffer, 'application/pdf');

        resolve({ pdfUrl, pdfKey: key });
      });

      // Header
      doc.fontSize(24).fillColor('#4F46E5').text('Launch Money Score Report', { align: 'center' });
      doc.moveDown(0.5);
      doc.fontSize(12).fillColor('#666').text(url, { align: 'center' });
      doc.moveDown(0.3);
      doc.fontSize(10).fillColor('#999').text(
        `Generated on ${new Date().toLocaleDateString()}`,
        { align: 'center' }
      );

      doc.moveDown(2);

      // Scores Section
      doc.fontSize(18).fillColor('#000').text('Overall Scores');
      doc.moveDown(0.5);

      const scoreY = doc.y;
      const scoreWidth = 150;
      const scoreSpacing = 20;

      // LMS Score
      drawScoreBox(doc, 50, scoreY, scoreWidth, result.lms, 100, 'Launch Money Score', '#4F46E5');
      
      // RRI Score
      drawScoreBox(doc, 50 + scoreWidth + scoreSpacing, scoreY, scoreWidth, result.rri, 100, 'Revenue Readiness', '#3B82F6');

      doc.moveDown(8);

      // PMI Score (on next line)
      drawScoreBox(doc, 50, doc.y, scoreWidth, result.pmi, 100, 'Popularity Momentum', '#8B5CF6');

      doc.moveDown(8);

      // Gates Section
      doc.fontSize(16).fillColor('#000').text('Critical Gates');
      doc.moveDown(0.5);

      Object.entries(result.gates).forEach(([gate, passed]) => {
        doc.fontSize(10)
          .fillColor(passed ? '#16A34A' : '#DC2626')
          .text(passed ? '✓' : '✗', { continued: true })
          .fillColor('#000')
          .text(` ${gate.replace(/_/g, ' ')}`, { indent: 20 });
        doc.moveDown(0.3);
      });

      doc.moveDown(1);

      // Top Fixes Section
      doc.fontSize(16).fillColor('#000').text('Top Priority Fixes');
      doc.moveDown(0.5);

      result.topFixes.forEach((fix, index) => {
        doc.fontSize(10)
          .fillColor('#4F46E5')
          .text(`${index + 1}.`, { continued: true, indent: 0 })
          .fillColor('#000')
          .text(` ${fix}`, { indent: 20 });
        doc.moveDown(0.5);
      });

      // Add new page for detailed breakdown
      doc.addPage();

      doc.fontSize(18).fillColor('#000').text('Category Breakdown');
      doc.moveDown(1);

      Object.entries(result.categories).forEach(([key, category]) => {
        doc.fontSize(14).fillColor('#4F46E5').text(`Category ${key}: ${category.score}/${category.maxScore}`);
        doc.moveDown(0.3);

        // Checks
        Object.entries(category.checks).forEach(([checkKey, passed]) => {
          doc.fontSize(9)
            .fillColor(passed ? '#16A34A' : '#DC2626')
            .text(passed ? '✓' : '✗', { continued: true, indent: 10 })
            .fillColor('#000')
            .text(` ${checkKey.replace(/_/g, ' ')}`, { indent: 25 });
        });

        doc.moveDown(0.5);

        // Evidence
        if (category.evidence.length > 0) {
          doc.fontSize(9).fillColor('#666').text('Evidence:', { indent: 10 });
          category.evidence.forEach((evidence) => {
            doc.fontSize(8).fillColor('#999').text(`• ${evidence}`, { indent: 20 });
          });
        }

        doc.moveDown(1);
      });

      // Footer
      doc.fontSize(8).fillColor('#999').text(
        'Generated by LMS Auditor • https://lms-auditor.com',
        50,
        doc.page.height - 50,
        { align: 'center' }
      );

      doc.end();
    } catch (error) {
      reject(error);
    }
  });
}

function drawScoreBox(
  doc: PDFKit.PDFDocument,
  x: number,
  y: number,
  width: number,
  score: number,
  maxScore: number,
  label: string,
  color: string
) {
  const height = 80;
  const percentage = (score / maxScore) * 100;

  // Box
  doc.rect(x, y, width, height).stroke('#E5E7EB');

  // Score
  doc.fontSize(32)
    .fillColor(color)
    .text(Math.round(score).toString(), x, y + 15, {
      width,
      align: 'center',
    });

  // Label
  doc.fontSize(10)
    .fillColor('#666')
    .text(label, x, y + 55, {
      width,
      align: 'center',
    });
}

/**
 * Generate badge embed code for LMS-Ready sites
 */
export function generateBadgeCode(url: string, lms: number): string {
  const badgeUrl = `https://lms-auditor.com/badge/${lms}`;
  
  return `<!-- LMS-Ready Badge -->
<a href="https://lms-auditor.com/verify/${encodeURIComponent(url)}" target="_blank" rel="noopener">
  <img src="${badgeUrl}" alt="LMS Score: ${lms}" width="120" height="40" />
</a>`;
}

